name: "publish-release"

on:
  push:
    # tags:
    #   - "v*"

jobs:
  npm-publish:
    name: "Publish"
    runs-on: ubuntu-latest
    container: rust
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      # - name: Download jq
      #   run: |
      #     curl -L https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -o /usr/local/bin/jq
      #     chmod +x /usr/local/bin/jq

      # - name: Download marine
      #   run: bash $GITHUB_WORKSPACE/.github/download_marine.sh

      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          registry-url: "https://registry.npmjs.org"
          cache: 'npm'

      # - name: Cache cargo
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #       ~/.cargo/bin
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Cache npm
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-v02-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-v02-

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      # - name: Install Rust
      #   working-directory: ./service
      #   run: |
      #     rustup toolchain install nightly-2021-04-24-x86_64-unknown-linux-gnu
      #     rustup default nightly-2021-04-24-x86_64-unknown-linux-gnu
      #     rustup override set nightly-2021-04-24-x86_64-unknown-linux-gnu
      #     rustup target add wasm32-wasi --toolchain nightly-2021-04-24-x86_64-unknown-linux-gnu

## Build
      # - name: Build aqua-dht.wasm
      #   working-directory: ./service
      #   run: ./build.sh

      # - name: Create builtin distribution package
      #   working-directory: ./service
      #   run: |
      #     mv artifacts aqua-dht
      #     tar -zcvf aqua-dht.tar.gz aqua-dht

      - name: Compile Aqua to TypeScript
        working-directory: ./aqua
        run: |
          npm i
          npm run build
      
      - name: Compile TypeScript to .js + .d.ts
        working-directory: ./aqua/target/typescript
        run: |
          echo "GITHUB_WORKSPACE=" $GITHUB_WORKSPACE
          echo "GITHUB_ACTION_PATH=" $GITHUB_ACTION_PATH
          echo "RUNNER_TEMP=" $RUNNER_TEMP
          pwd
          ls -l ..
          whoami
        
          npm i
          npm run build

#       - name: Build Changelog
#         id: github_release
#         uses: mikepenz/release-changelog-builder-action@v1
#         with:
#           configuration: ".github/workflows/changelog_config.json"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# ## Publish
#       - name: Release
#         uses: softprops/action-gh-release@v1
#         with:
#           name: aqua-dht ${{ env.RELEASE_VERSION }}
#           tag_name: ${{ env.RELEASE_VERSION }}
#           files: |
#             ./service/aqua-dht.tar.gz
#           body: ${{steps.github_release.outputs.changelog}}
#           draft: false
#           prerelease: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# ### Publish Aqua API
#       - run: |
#           npm version ${{ env.RELEASE_VERSION }}
#           npm publish --access public
#         env:
#             NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#         working-directory: ./aqua
      
# ### Publish TS API
#       - run: |
#           npm version ${{ env.RELEASE_VERSION }}
#           npm publish --access public
#         env:
#             NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#         working-directory: ./aqua/target/typescript

# ### TODO: Rebuild node-distro
#       - name: Trigger new node-distro container
#         uses: benc-uk/workflow-dispatch@v1
#         with:
#           workflow: Publish Container
#           repo: fluencelabs/node-distro
#           ref: 'main'
#           token: ${{ secrets.PERSONAL_TOKEN }}
