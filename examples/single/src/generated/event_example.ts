/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-224
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services

 export interface SubscriberAPIDef {
     receive_event: (event: {value:string}, callParams: CallParams<'event'>) => void;
 }

 export function registerSubscriberAPI(serviceId: string, service: SubscriberAPIDef): void;
export function registerSubscriberAPI(peer: FluencePeer, serviceId: string, service: SubscriberAPIDef): void;
 export function registerSubscriberAPI(...args: any) {
    let peer: FluencePeer;
    let serviceId: any;
    let service: any;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } 

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'receive_event') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         event: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 service.receive_event(req.args[0], callParams); resp.result = {}

 }
    
  
          next();
      });
 }
      

// Functions

 export function call_subscriber(sub: {peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}, event: {value:string}, config?: {ttl?: number}) : Promise<void>;
 export function call_subscriber(peer: FluencePeer, sub: {peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}, event: {value:string}, config?: {ttl?: number}) : Promise<void>;
 export function call_subscriber(...args: any) {
     let peer: FluencePeer;
     let sub: any;
let event: any;
     let config: any;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         sub = args[1];
event = args[2];
config = args[3];
     } else {
         peer = FluencePeer.default;
         sub = args[0];
event = args[1];
config = args[2];
     }
    
     let request: RequestFlow;
     const promise = new Promise<void>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "sub") [] sub)
     )
     (call %init_peer_id% ("getDataSrv" "event") [] event)
    )
    (call -relay- ("op" "noop") [])
   )
   (fold sub.$.relay_id! -via-peer-
    (seq
     (call -via-peer- ("op" "noop") [])
     (next -via-peer-)
    )
   )
  )
  (xor
   (seq
    (seq
     (call -relay- ("op" "noop") [])
     (fold sub.$.relay_id! -via-peer-
      (seq
       (call -via-peer- ("op" "noop") [])
       (next -via-peer-)
      )
     )
    )
    (call sub.$.peer_id! (sub.$.service_id.[0]! "receive_event") [event])
   )
   (seq
    (seq
     (seq
      (fold sub.$.relay_id! -via-peer-
       (seq
        (call -via-peer- ("op" "noop") [])
        (next -via-peer-)
       )
      )
      (call -relay- ("op" "noop") [])
     )
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
    )
    (call -relay- ("op" "noop") [])
   )
  )
 )
 (seq
  (seq
   (fold sub.$.relay_id! -via-peer-
    (seq
     (call -via-peer- ("op" "noop") [])
     (next -via-peer-)
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
 )
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelay ;
                });
                h.on('getDataSrv', 'sub', () => {return sub;});
h.on('getDataSrv', 'event', () => {return event;});
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for call_subscriber');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
      


 export function send_everyone(topic: string, event: {value:string}, config?: {ttl?: number}) : Promise<void>;
 export function send_everyone(peer: FluencePeer, topic: string, event: {value:string}, config?: {ttl?: number}) : Promise<void>;
 export function send_everyone(...args: any) {
     let peer: FluencePeer;
     let topic: any;
let event: any;
     let config: any;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         topic = args[1];
event = args[2];
config = args[3];
     } else {
         peer = FluencePeer.default;
         topic = args[0];
event = args[1];
config = args[2];
     }
    
     let request: RequestFlow;
     const promise = new Promise<void>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "topic") [] topic)
   )
   (call %init_peer_id% ("getDataSrv" "event") [] event)
  )
  (xor
   (seq
    (xor
     (seq
      (seq
       (seq
        (call -relay- ("op" "string_to_b58") [topic] k)
        (call -relay- ("kad" "neighborhood") [k [] []] nodes)
       )
       (fold nodes n
        (par
         (seq
          (xor
           (seq
            (call n ("peer" "timestamp_sec") [] t)
            (call n ("aqua-dht" "get_values") [topic t] $res)
           )
           (null)
          )
          (call -relay- ("op" "noop") [])
         )
         (next n)
        )
       )
      )
      (call -relay- ("aqua-dht" "merge_two") [$res.$.[0].result! $res.$.[1].result!] v)
     )
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
    )
    (fold v.$.result! sub
     (par
      (seq
       (fold sub.$.relay_id! -via-peer-
        (seq
         (call -via-peer- ("op" "noop") [])
         (next -via-peer-)
        )
       )
       (xor
        (seq
         (fold sub.$.relay_id! -via-peer-
          (seq
           (call -via-peer- ("op" "noop") [])
           (next -via-peer-)
          )
         )
         (call sub.$.peer_id! (sub.$.service_id.[0]! "receive_event") [event])
        )
        (seq
         (seq
          (fold sub.$.relay_id! -via-peer-
           (seq
            (call -via-peer- ("op" "noop") [])
            (next -via-peer-)
           )
          )
          (call -relay- ("op" "noop") [])
         )
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
        )
       )
      )
      (next sub)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelay ;
                });
                h.on('getDataSrv', 'topic', () => {return topic;});
h.on('getDataSrv', 'event', () => {return event;});
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for send_everyone');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
      
