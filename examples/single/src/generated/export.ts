/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-224
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services


// Functions

 export function initTopicAndSubscribe(topic: string, value: string, relay_id: string | null, service_id: string | null, config?: {ttl?: number}) : Promise<void>;
 export function initTopicAndSubscribe(peer: FluencePeer, topic: string, value: string, relay_id: string | null, service_id: string | null, config?: {ttl?: number}) : Promise<void>;
 export function initTopicAndSubscribe(...args: any) {
     let peer: FluencePeer;
     let topic: any;
let value: any;
let relay_id: any;
let service_id: any;
     let config: any;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         topic = args[1];
value = args[2];
relay_id = args[3];
service_id = args[4];
config = args[5];
     } else {
         peer = FluencePeer.default;
         topic = args[0];
value = args[1];
relay_id = args[2];
service_id = args[3];
config = args[4];
     }
    
     let request: RequestFlow;
     const promise = new Promise<void>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "topic") [] topic)
     )
     (call %init_peer_id% ("getDataSrv" "value") [] value)
    )
    (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
   )
   (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
  )
  (xor
   (seq
    (seq
     (call -relay- ("op" "string_to_b58") [topic] k)
     (call -relay- ("kad" "neighborhood") [k [] []] nodes)
    )
    (fold nodes n
     (par
      (xor
       (seq
        (seq
         (call n ("peer" "timestamp_sec") [] t)
         (call n ("aqua-dht" "register_key") [topic t false 0])
        )
        (call n ("aqua-dht" "put_value") [topic value t relay_id service_id 0])
       )
       (null)
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelay ;
                });
                h.on('getDataSrv', 'topic', () => {return topic;});
h.on('getDataSrv', 'value', () => {return value;});
h.on('getDataSrv', 'relay_id', () => {return relay_id === null ? [] : [relay_id];});
h.on('getDataSrv', 'service_id', () => {return service_id === null ? [] : [service_id];});
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for initTopicAndSubscribe');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
      


 export function findSubscribers(topic: string, config?: {ttl?: number}) : Promise<{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[]>;
 export function findSubscribers(peer: FluencePeer, topic: string, config?: {ttl?: number}) : Promise<{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[]>;
 export function findSubscribers(...args: any) {
     let peer: FluencePeer;
     let topic: any;
     let config: any;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         topic = args[1];
config = args[2];
     } else {
         peer = FluencePeer.default;
         topic = args[0];
config = args[1];
     }
    
     let request: RequestFlow;
     const promise = new Promise<{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[]>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "topic") [] topic)
    )
    (xor
     (seq
      (seq
       (call -relay- ("op" "string_to_b58") [topic] k)
       (call -relay- ("kad" "neighborhood") [k [] []] nodes)
      )
      (fold nodes n
       (par
        (seq
         (xor
          (seq
           (call n ("peer" "timestamp_sec") [] t)
           (call n ("aqua-dht" "get_values") [topic t] $res)
          )
          (null)
         )
         (call %init_peer_id% ("op" "noop") [])
        )
        (next n)
       )
      )
     )
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
    )
   )
   (xor
    (call -relay- ("aqua-dht" "merge_two") [$res.$.[0].result! $res.$.[1].result!] v)
    (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [v.$.result!])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelay ;
                });
                h.on('getDataSrv', 'topic', () => {return topic;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for findSubscribers');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
      
