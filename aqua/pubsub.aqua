module Registry.PubSub declares *

import "registry.aqua"
import "registry-api.aqua"
import "@fluencelabs/aqua-lib/builtin.aqua"

func get_route_id(topic: string, peer_id: string) -> string:
  route_id <- Registry.get_key_id(topic, peer_id)
  <- route_id

-- Get peers closest to the topic's hash in Kademlia network
-- These peers are expected to store list of subscribers of this topic
func getNeighbours(route_id: string) -> []PeerId:
  k <- Op.string_to_b58(route_id)
  nodes <- Kademlia.neighborhood(k, nil, nil)
  <- nodes

-- If this peer have set node_id as a subscriber for topic,
-- this call will prevent subscriber from re-subscribing
-- so that eventually it will disappear from the subscribers list
func removeSubscriber(route_id: string):
  on HOST_PEER_ID:
    t <- Peer.timestamp_sec()
    Registry.clear_host_record(route_id, t)

-- Create a topic: register it on the closest peers
func initTopic(topic: string) -> string:
  t <- Peer.timestamp_sec()
  signature <- get_key_signature(topic, t)

  on HOST_PEER_ID:
    route_id <- get_route_id(topic, %init_peer_id%)
    nodes <- getNeighbours(route_id)
    for n <- nodes par:
      on n:
        try:
          result <- register_key(topic, t, signature, false)
  <- route_id

-- Create a topic and subscribe to it
-- %init_peer_id% (current client) will become a subscriber
func initTopicAndSubscribe(topic: string, value: string, relay_id: ?PeerId, service_id: ?string) -> string:
  t <- Peer.timestamp_sec()
  key_signature <- get_key_signature(topic, t)
  record_signature <- get_record_signature(topic, value, relay_id, service_id, t)

  on HOST_PEER_ID:
    route_id <- get_route_id(topic, %init_peer_id%)
    nodes <- getNeighbours(route_id)
    for n <- nodes par:
      on n:
        try:
          register_key(topic, t, key_signature, false)
          put_record(route_id, value, relay_id, service_id, t, record_signature)
  <- route_id

-- Create a topic and subscribe to it
-- %init_peer_id% (current client) will become a subscriber
-- In contrast with non-blocking version, waits for at least a single write to succeed
func initTopicAndSubscribeBlocking(
  topic: string, value: string,
  relay_id: ?PeerId, service_id: ?string,
  progress: string -> ()
) -> string:
  t <- Peer.timestamp_sec()
  key_signature <- get_key_signature(topic, t)
  record_signature <- get_record_signature(topic, value, relay_id, service_id, t)

  results: *DhtResult
  on HOST_PEER_ID:
    route_id <- get_route_id(topic, %init_peer_id%)
    nodes <- getNeighbours(route_id)
    for n <- nodes par:
      on n:
        try:
          register_key(topic, t, key_signature, false)
          result <- put_record(route_id, value, relay_id, service_id, t, record_signature)
          if result.success:
            results <<- result
            progress(n)
  join results[1]
  <- route_id

-- Create a topic and make the given node a subscriber to it
func initTopicAndSubscribeNode(subscriber_node_id: PeerId, topic: string, value: string, service_id: ?string) -> string:
  t <- Peer.timestamp_sec()
  key_signature <- get_key_signature(topic, t)
  record_signature <- get_host_record_signature(topic, value, nil, service_id, t)

  on subscriber_node_id:
    route_id <- get_route_id(topic, %init_peer_id%)
    register_key(topic, t, key_signature, false)
    r <- put_host_record(route_id, value, nil, service_id, t, record_signature)
    nodes <- getNeighbours(route_id)
    for n <- nodes par:
      on n:
        try:
          register_key(topic, t, key_signature, false)
          propagate_host_record(r)
  <- route_id

-- Subscribe to a topic
-- Note: topic must be already initiated
func subscribe(topic: string, value: string, relay_id: ?PeerId, service_id: ?string):
  t <- Peer.timestamp_sec()
  record_signature <- get_record_signature(topic, value, relay_id, service_id, t)

  on HOST_PEER_ID:
    route_id <- get_route_id(topic, %init_peer_id%)
    nodes <- getNeighbours(route_id)
    for n <- nodes par:
      on n:
        try:
          put_record(route_id, value, relay_id, service_id, t, record_signature)

-- Subscribe a node to the given topic
-- Note: topic must be already initiated
func subscribeNode(subscriber_node_id: PeerId, topic: string, value: string, service_id: ?string):
  t <- Peer.timestamp_sec()
  key_signature <- get_key_signature(topic, t)
  record_signature <- get_host_record_signature(topic, value, nil, service_id, t)

  on subscriber_node_id:
    route_id <- get_route_id(topic, %init_peer_id%)
    r <- put_host_record(route_id, value, nil, service_id, t, record_signature)
    nodes <- getNeighbours(route_id)
    for n <- nodes par:
      on n:
        try:
          register_key(topic, t, key_signature, false)
          propagate_host_record(r)

-- Find the list of subscribers for the given topic
func findSubscribers(route_id: string) -> []Record:
  on HOST_PEER_ID:
    nodes <- getNeighbours(route_id)
    res: *GetValuesResult
    for n <- nodes par:
      on n:
        try:
          t <- Peer.timestamp_sec()
          res <- Registry.get_records(route_id, t)
    v <- Registry.merge_two(res[0].result, res[1].result)
  <- v.result

-- Execute the given code on subscribers
-- Note that you can provide another Aqua function as an argument to this one
func executeOnSubscribers(route_id: string, call: Record -> ()):
  subs <- findSubscribers(route_id)
  for r <- subs par:
    on r.peer_id via r.relay_id:
      call(r)
