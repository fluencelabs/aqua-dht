/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-222
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services


// Functions

 export function clearExpired_86400(config?: {ttl?: number}) : Promise<void>;
 export function clearExpired_86400(peer: FluencePeer, config?: {ttl?: number}) : Promise<void>;
 export function clearExpired_86400(...args) {
     let peer: FluencePeer;
     
     let config;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         config = args[1];
     } else {
         peer = FluencePeer.default;
         config = args[0];
     }
    
     let request: RequestFlow;
     const promise = new Promise<void>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
  (xor
   (seq
    (call -relay- ("peer" "timestamp_sec") [] t)
    (call -relay- ("aqua-dht" "clear_expired") [t])
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelay ;
                });
                
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for clearExpired_86400');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
      


 export function replicate_3600(config?: {ttl?: number}) : Promise<void>;
 export function replicate_3600(peer: FluencePeer, config?: {ttl?: number}) : Promise<void>;
 export function replicate_3600(...args) {
     let peer: FluencePeer;
     
     let config;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         config = args[1];
     } else {
         peer = FluencePeer.default;
         config = args[0];
     }
    
     let request: RequestFlow;
     const promise = new Promise<void>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
  (xor
   (seq
    (seq
     (call -relay- ("peer" "timestamp_sec") [] t)
     (call -relay- ("aqua-dht" "evict_stale") [t] res)
    )
    (fold res.$.results! r
     (par
      (seq
       (seq
        (call -relay- ("op" "string_to_b58") [r.$.key.key!] k)
        (call -relay- ("kad" "neighborhood") [k [] []] nodes)
       )
       (fold nodes n
        (par
         (xor
          (seq
           (call n ("aqua-dht" "republish_key") [r.$.key! t])
           (call n ("aqua-dht" "republish_values") [r.$.key.key! r.$.records! t])
          )
          (seq
           (call -relay- ("op" "noop") [])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
          )
         )
         (next n)
        )
       )
      )
      (next r)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelay ;
                });
                
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for replicate_3600');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
      
