/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-222
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services

 export interface AquaDHTDef {
     clear_expired: (current_timestamp_sec: number, callParams: CallParams<'current_timestamp_sec'>) => {count_keys:number;count_values:number;error:string;success:boolean};
clear_host_value: (key: string, current_timestamp_sec: number, callParams: CallParams<'key' | 'current_timestamp_sec'>) => {error:string;success:boolean};
evict_stale: (current_timestamp_sec: number, callParams: CallParams<'current_timestamp_sec'>) => {error:string;results:{key:{key:string;peer_id:string;pinned:boolean;timestamp_created:number;weight:number};records:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[]}[];success:boolean};
get_key_metadata: (key: string, current_timestamp_sec: number, callParams: CallParams<'key' | 'current_timestamp_sec'>) => {error:string;key:{key:string;peer_id:string;pinned:boolean;timestamp_created:number;weight:number};success:boolean};
get_values: (key: string, current_timestamp_sec: number, callParams: CallParams<'key' | 'current_timestamp_sec'>) => {error:string;result:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[];success:boolean};
merge: (records: {peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[][], callParams: CallParams<'records'>) => {error:string;result:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[];success:boolean};
merge_hack_get_values: (records: {error:string;result:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[];success:boolean}[], callParams: CallParams<'records'>) => {error:string;result:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[];success:boolean};
merge_two: (a: {peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[], b: {peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[], callParams: CallParams<'a' | 'b'>) => {error:string;result:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[];success:boolean};
propagate_host_value: (set_host_value: {error:string;key:string;success:boolean;value:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[]}, current_timestamp_sec: number, weight: number, callParams: CallParams<'set_host_value' | 'current_timestamp_sec' | 'weight'>) => {error:string;success:boolean};
put_host_value: (key: string, value: string, current_timestamp_sec: number, relay_id: string[], service_id: string[], weight: number, callParams: CallParams<'key' | 'value' | 'current_timestamp_sec' | 'relay_id' | 'service_id' | 'weight'>) => {error:string;key:string;success:boolean;value:{peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[]};
put_value: (key: string, value: string, current_timestamp_sec: number, relay_id: string[], service_id: string[], weight: number, callParams: CallParams<'key' | 'value' | 'current_timestamp_sec' | 'relay_id' | 'service_id' | 'weight'>) => {error:string;success:boolean};
register_key: (key: string, current_timestamp_sec: number, pin: boolean, weight: number, callParams: CallParams<'key' | 'current_timestamp_sec' | 'pin' | 'weight'>) => {error:string;success:boolean};
renew_host_value: (key: string, current_timestamp_sec: number, callParams: CallParams<'key' | 'current_timestamp_sec'>) => {error:string;success:boolean};
republish_key: (key: {key:string;peer_id:string;pinned:boolean;timestamp_created:number;weight:number}, current_timestamp_sec: number, callParams: CallParams<'key' | 'current_timestamp_sec'>) => {error:string;success:boolean};
republish_values: (key: string, records: {peer_id:string;relay_id:string[];service_id:string[];set_by:string;timestamp_created:number;value:string;weight:number}[], current_timestamp_sec: number, callParams: CallParams<'key' | 'records' | 'current_timestamp_sec'>) => {error:string;success:boolean;updated:number};
set_expired_timeout: (timeout_sec: number, callParams: CallParams<'timeout_sec'>) => void;
set_host_expired_timeout: (timeout_sec: number, callParams: CallParams<'timeout_sec'>) => void;
set_stale_timeout: (timeout_sec: number, callParams: CallParams<'timeout_sec'>) => void;
 }

 export function registerAquaDHT(service: AquaDHTDef): void;
export function registerAquaDHT(serviceId: string, service: AquaDHTDef): void;
export function registerAquaDHT(peer: FluencePeer, service: AquaDHTDef): void;
export function registerAquaDHT(peer: FluencePeer, serviceId: string, service: AquaDHTDef): void;
 export function registerAquaDHT(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "aqua-dht"
}

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'clear_expired') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         current_timestamp_sec: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.clear_expired(req.args[0], callParams)

 }
    


 if (req.fnName === 'clear_host_value') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],current_timestamp_sec: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.clear_host_value(req.args[0], req.args[1], callParams)

 }
    


 if (req.fnName === 'evict_stale') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         current_timestamp_sec: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.evict_stale(req.args[0], callParams)

 }
    


 if (req.fnName === 'get_key_metadata') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],current_timestamp_sec: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.get_key_metadata(req.args[0], req.args[1], callParams)

 }
    


 if (req.fnName === 'get_values') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],current_timestamp_sec: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.get_values(req.args[0], req.args[1], callParams)

 }
    


 if (req.fnName === 'merge') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         records: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.merge(req.args[0], callParams)

 }
    


 if (req.fnName === 'merge_hack_get_values') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         records: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.merge_hack_get_values(req.args[0], callParams)

 }
    


 if (req.fnName === 'merge_two') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         a: req.tetraplets[0],b: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.merge_two(req.args[0], req.args[1], callParams)

 }
    


 if (req.fnName === 'propagate_host_value') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         set_host_value: req.tetraplets[0],current_timestamp_sec: req.tetraplets[1],weight: req.tetraplets[2]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.propagate_host_value(req.args[0], req.args[1], req.args[2], callParams)

 }
    


 if (req.fnName === 'put_host_value') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],value: req.tetraplets[1],current_timestamp_sec: req.tetraplets[2],relay_id: req.tetraplets[3],service_id: req.tetraplets[4],weight: req.tetraplets[5]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.put_host_value(req.args[0], req.args[1], req.args[2], req.args[3], req.args[4], req.args[5], callParams)

 }
    


 if (req.fnName === 'put_value') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],value: req.tetraplets[1],current_timestamp_sec: req.tetraplets[2],relay_id: req.tetraplets[3],service_id: req.tetraplets[4],weight: req.tetraplets[5]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.put_value(req.args[0], req.args[1], req.args[2], req.args[3], req.args[4], req.args[5], callParams)

 }
    


 if (req.fnName === 'register_key') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],current_timestamp_sec: req.tetraplets[1],pin: req.tetraplets[2],weight: req.tetraplets[3]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.register_key(req.args[0], req.args[1], req.args[2], req.args[3], callParams)

 }
    


 if (req.fnName === 'renew_host_value') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],current_timestamp_sec: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.renew_host_value(req.args[0], req.args[1], callParams)

 }
    


 if (req.fnName === 'republish_key') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],current_timestamp_sec: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.republish_key(req.args[0], req.args[1], callParams)

 }
    


 if (req.fnName === 'republish_values') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],records: req.tetraplets[1],current_timestamp_sec: req.tetraplets[2]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.republish_values(req.args[0], req.args[1], req.args[2], callParams)

 }
    


 if (req.fnName === 'set_expired_timeout') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         timeout_sec: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 service.set_expired_timeout(req.args[0], callParams); resp.result = {}

 }
    


 if (req.fnName === 'set_host_expired_timeout') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         timeout_sec: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 service.set_host_expired_timeout(req.args[0], callParams); resp.result = {}

 }
    


 if (req.fnName === 'set_stale_timeout') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         timeout_sec: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 service.set_stale_timeout(req.args[0], callParams); resp.result = {}

 }
    
  
          next();
      });
 }
      

// Functions

