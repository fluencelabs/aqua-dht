/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-222
 *
 */
import { FluencePeer } from "@fluencelabs/fluence";
import {
  ResultCodes,
  RequestFlow,
  RequestFlowBuilder,
  CallParams,
} from "@fluencelabs/fluence/dist/internal/compilerSupport/v1";

// Services

// Functions

export function removeSubscriber(
  topic: string,
  config?: { ttl?: number }
): Promise<void>;
export function removeSubscriber(
  peer: FluencePeer,
  topic: string,
  config?: { ttl?: number }
): Promise<void>;
export function removeSubscriber(...args) {
  let peer: FluencePeer;
  let topic;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    topic = args[1];
    config = args[2];
  } else {
    peer = FluencePeer.default;
    topic = args[0];
    config = args[1];
  }

  let request: RequestFlow;
  const promise = new Promise<void>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "topic") [] topic)
  )
  (xor
   (seq
    (call -relay- ("peer" "timestamp_sec") [] t)
    (call -relay- ("aqua-dht" "clear_host_value") [topic t])
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.onEvent("callbackSrv", "response", (args) => {});

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for removeSubscriber");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return Promise.race([promise, Promise.resolve()]);
}

export function subscribeNode(
  subscriber_node_id: string,
  topic: string,
  value: string,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function subscribeNode(
  peer: FluencePeer,
  subscriber_node_id: string,
  topic: string,
  value: string,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function subscribeNode(...args) {
  let peer: FluencePeer;
  let subscriber_node_id;
  let topic;
  let value;
  let service_id;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    subscriber_node_id = args[1];
    topic = args[2];
    value = args[3];
    service_id = args[4];
    config = args[5];
  } else {
    peer = FluencePeer.default;
    subscriber_node_id = args[0];
    topic = args[1];
    value = args[2];
    service_id = args[3];
    config = args[4];
  }

  let request: RequestFlow;
  const promise = new Promise<void>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
       (call %init_peer_id% ("getDataSrv" "subscriber_node_id") [] subscriber_node_id)
      )
      (call %init_peer_id% ("getDataSrv" "topic") [] topic)
     )
     (call %init_peer_id% ("getDataSrv" "value") [] value)
    )
    (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (seq
    (seq
     (seq
      (seq
       (call subscriber_node_id ("peer" "timestamp_sec") [] t)
       (call subscriber_node_id ("aqua-dht" "put_host_value") [topic value t [] service_id 0] r)
      )
      (call subscriber_node_id ("op" "string_to_b58") [topic] k)
     )
     (call subscriber_node_id ("kad" "neighborhood") [k [] []] nodes)
    )
    (fold nodes n
     (par
      (xor
       (seq
        (seq
         (call n ("peer" "timestamp_sec") [] tt)
         (call n ("aqua-dht" "register_key") [topic tt false 0])
        )
        (call n ("aqua-dht" "propagate_host_value") [r tt 0])
       )
       (null)
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "subscriber_node_id", () => {
          return subscriber_node_id;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.on("getDataSrv", "value", () => {
          return value;
        });
        h.on("getDataSrv", "service_id", () => {
          return service_id === null ? [] : [service_id];
        });
        h.onEvent("callbackSrv", "response", (args) => {});

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for subscribeNode");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return Promise.race([promise, Promise.resolve()]);
}

export function executeOnSubscribers(
  topic: string,
  call: (
    arg0: {
      peer_id: string;
      relay_id: string[];
      service_id: string[];
      set_by: string;
      timestamp_created: number;
      value: string;
      weight: number;
    },
    callParams: CallParams<"arg0">
  ) => void,
  config?: { ttl?: number }
): Promise<void>;
export function executeOnSubscribers(
  peer: FluencePeer,
  topic: string,
  call: (
    arg0: {
      peer_id: string;
      relay_id: string[];
      service_id: string[];
      set_by: string;
      timestamp_created: number;
      value: string;
      weight: number;
    },
    callParams: CallParams<"arg0">
  ) => void,
  config?: { ttl?: number }
): Promise<void>;
export function executeOnSubscribers(...args) {
  let peer: FluencePeer;
  let topic;
  let call;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    topic = args[1];
    call = args[2];
    config = args[3];
  } else {
    peer = FluencePeer.default;
    topic = args[0];
    call = args[1];
    config = args[2];
  }

  let request: RequestFlow;
  const promise = new Promise<void>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "topic") [] topic)
   )
   (xor
    (seq
     (seq
      (seq
       (call -relay- ("op" "string_to_b58") [topic] k)
       (call -relay- ("kad" "neighborhood") [k [] []] nodes)
      )
      (fold nodes n
       (par
        (seq
         (xor
          (seq
           (call n ("peer" "timestamp_sec") [] t)
           (call n ("aqua-dht" "get_values") [topic t] $res)
          )
          (null)
         )
         (call -relay- ("op" "noop") [])
        )
        (next n)
       )
      )
     )
     (call -relay- ("aqua-dht" "merge_two") [$res.$.[0].result! $res.$.[1].result!] v)
    )
    (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
   )
  )
  (fold v.$.result! r
   (par
    (seq
     (fold r.$.relay_id! -via-peer-
      (seq
       (call -via-peer- ("op" "noop") [])
       (next -via-peer-)
      )
     )
     (xor
      (xor
       (call %init_peer_id% ("callbackSrv" "call") [r])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
      )
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
     )
    )
    (next r)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });

        h.use((req, resp, next) => {
          if (req.serviceId === "callbackSrv" && req.fnName === "call") {
            const callParams = {
              ...req.particleContext,
              tetraplets: {
                arg0: req.tetraplets[0],
              },
            };
            resp.retCode = ResultCodes.success;
            call(req.args[0], callParams);
            resp.result = {};
          }
          next();
        });

        h.onEvent("callbackSrv", "response", (args) => {});

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for executeOnSubscribers");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return Promise.race([promise, Promise.resolve()]);
}

export function subscribe(
  topic: string,
  value: string,
  relay_id: string | null,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function subscribe(
  peer: FluencePeer,
  topic: string,
  value: string,
  relay_id: string | null,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function subscribe(...args) {
  let peer: FluencePeer;
  let topic;
  let value;
  let relay_id;
  let service_id;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    topic = args[1];
    value = args[2];
    relay_id = args[3];
    service_id = args[4];
    config = args[5];
  } else {
    peer = FluencePeer.default;
    topic = args[0];
    value = args[1];
    relay_id = args[2];
    service_id = args[3];
    config = args[4];
  }

  let request: RequestFlow;
  const promise = new Promise<void>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "topic") [] topic)
     )
     (call %init_peer_id% ("getDataSrv" "value") [] value)
    )
    (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
   )
   (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
  )
  (xor
   (seq
    (seq
     (call -relay- ("op" "string_to_b58") [topic] k)
     (call -relay- ("kad" "neighborhood") [k [] []] nodes)
    )
    (fold nodes n
     (par
      (xor
       (seq
        (call n ("peer" "timestamp_sec") [] t)
        (call n ("aqua-dht" "put_value") [topic value t relay_id service_id 0])
       )
       (null)
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.on("getDataSrv", "value", () => {
          return value;
        });
        h.on("getDataSrv", "relay_id", () => {
          return relay_id === null ? [] : [relay_id];
        });
        h.on("getDataSrv", "service_id", () => {
          return service_id === null ? [] : [service_id];
        });
        h.onEvent("callbackSrv", "response", (args) => {});

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for subscribe");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return Promise.race([promise, Promise.resolve()]);
}

export function getNeighbours(
  topic: string,
  config?: { ttl?: number }
): Promise<string[]>;
export function getNeighbours(
  peer: FluencePeer,
  topic: string,
  config?: { ttl?: number }
): Promise<string[]>;
export function getNeighbours(...args) {
  let peer: FluencePeer;
  let topic;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    topic = args[1];
    config = args[2];
  } else {
    peer = FluencePeer.default;
    topic = args[0];
    config = args[1];
  }

  let request: RequestFlow;
  const promise = new Promise<string[]>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "topic") [] topic)
    )
    (call %init_peer_id% ("op" "string_to_b58") [topic] k)
   )
   (call %init_peer_id% ("kad" "neighborhood") [k [] []] nodes)
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [nodes])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.onEvent("callbackSrv", "response", (args) => {
          const [res] = args;
          resolve(res);
        });

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for getNeighbours");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return promise;
}

export function initTopicAndSubscribeNode(
  subscriber_node_id: string,
  topic: string,
  value: string,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function initTopicAndSubscribeNode(
  peer: FluencePeer,
  subscriber_node_id: string,
  topic: string,
  value: string,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function initTopicAndSubscribeNode(...args) {
  let peer: FluencePeer;
  let subscriber_node_id;
  let topic;
  let value;
  let service_id;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    subscriber_node_id = args[1];
    topic = args[2];
    value = args[3];
    service_id = args[4];
    config = args[5];
  } else {
    peer = FluencePeer.default;
    subscriber_node_id = args[0];
    topic = args[1];
    value = args[2];
    service_id = args[3];
    config = args[4];
  }

  let request: RequestFlow;
  const promise = new Promise<void>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
       (call %init_peer_id% ("getDataSrv" "subscriber_node_id") [] subscriber_node_id)
      )
      (call %init_peer_id% ("getDataSrv" "topic") [] topic)
     )
     (call %init_peer_id% ("getDataSrv" "value") [] value)
    )
    (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (seq
    (seq
     (seq
      (seq
       (seq
        (call subscriber_node_id ("peer" "timestamp_sec") [] t)
        (call subscriber_node_id ("aqua-dht" "register_key") [topic t false 0])
       )
       (call subscriber_node_id ("aqua-dht" "put_host_value") [topic value t [] service_id 0] r)
      )
      (call subscriber_node_id ("op" "string_to_b58") [topic] k)
     )
     (call subscriber_node_id ("kad" "neighborhood") [k [] []] nodes)
    )
    (fold nodes n
     (par
      (xor
       (seq
        (seq
         (call n ("peer" "timestamp_sec") [] tt)
         (call n ("aqua-dht" "register_key") [topic tt false 0])
        )
        (call n ("aqua-dht" "propagate_host_value") [r tt 0])
       )
       (null)
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "subscriber_node_id", () => {
          return subscriber_node_id;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.on("getDataSrv", "value", () => {
          return value;
        });
        h.on("getDataSrv", "service_id", () => {
          return service_id === null ? [] : [service_id];
        });
        h.onEvent("callbackSrv", "response", (args) => {});

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for initTopicAndSubscribeNode");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return Promise.race([promise, Promise.resolve()]);
}

export function initTopic(
  topic: string,
  config?: { ttl?: number }
): Promise<void>;
export function initTopic(
  peer: FluencePeer,
  topic: string,
  config?: { ttl?: number }
): Promise<void>;
export function initTopic(...args) {
  let peer: FluencePeer;
  let topic;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    topic = args[1];
    config = args[2];
  } else {
    peer = FluencePeer.default;
    topic = args[0];
    config = args[1];
  }

  let request: RequestFlow;
  const promise = new Promise<void>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "topic") [] topic)
  )
  (xor
   (seq
    (seq
     (call -relay- ("op" "string_to_b58") [topic] k)
     (call -relay- ("kad" "neighborhood") [k [] []] nodes)
    )
    (fold nodes n
     (par
      (xor
       (seq
        (call n ("peer" "timestamp_sec") [] t)
        (call n ("aqua-dht" "register_key") [topic t false 0])
       )
       (null)
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.onEvent("callbackSrv", "response", (args) => {});

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for initTopic");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return Promise.race([promise, Promise.resolve()]);
}

export function findSubscribers(
  topic: string,
  config?: { ttl?: number }
): Promise<
  {
    peer_id: string;
    relay_id: string[];
    service_id: string[];
    set_by: string;
    timestamp_created: number;
    value: string;
    weight: number;
  }[]
>;
export function findSubscribers(
  peer: FluencePeer,
  topic: string,
  config?: { ttl?: number }
): Promise<
  {
    peer_id: string;
    relay_id: string[];
    service_id: string[];
    set_by: string;
    timestamp_created: number;
    value: string;
    weight: number;
  }[]
>;
export function findSubscribers(...args) {
  let peer: FluencePeer;
  let topic;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    topic = args[1];
    config = args[2];
  } else {
    peer = FluencePeer.default;
    topic = args[0];
    config = args[1];
  }

  let request: RequestFlow;
  const promise = new Promise<
    {
      peer_id: string;
      relay_id: string[];
      service_id: string[];
      set_by: string;
      timestamp_created: number;
      value: string;
      weight: number;
    }[]
  >((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "topic") [] topic)
   )
   (xor
    (seq
     (seq
      (seq
       (call -relay- ("op" "string_to_b58") [topic] k)
       (call -relay- ("kad" "neighborhood") [k [] []] nodes)
      )
      (fold nodes n
       (par
        (seq
         (xor
          (seq
           (call n ("peer" "timestamp_sec") [] t)
           (call n ("aqua-dht" "get_values") [topic t] $res)
          )
          (null)
         )
         (call -relay- ("op" "noop") [])
        )
        (next n)
       )
      )
     )
     (call -relay- ("aqua-dht" "merge_two") [$res.$.[0].result! $res.$.[1].result!] v)
    )
    (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [v.$.result!])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.onEvent("callbackSrv", "response", (args) => {
          const [res] = args;
          resolve(res);
        });

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for findSubscribers");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return promise;
}

export function initTopicAndSubscribe(
  topic: string,
  value: string,
  relay_id: string | null,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function initTopicAndSubscribe(
  peer: FluencePeer,
  topic: string,
  value: string,
  relay_id: string | null,
  service_id: string | null,
  config?: { ttl?: number }
): Promise<void>;
export function initTopicAndSubscribe(...args) {
  let peer: FluencePeer;
  let topic;
  let value;
  let relay_id;
  let service_id;
  let config;
  if (args[0] instanceof FluencePeer) {
    peer = args[0];
    topic = args[1];
    value = args[2];
    relay_id = args[3];
    service_id = args[4];
    config = args[5];
  } else {
    peer = FluencePeer.default;
    topic = args[0];
    value = args[1];
    relay_id = args[2];
    service_id = args[3];
    config = args[4];
  }

  let request: RequestFlow;
  const promise = new Promise<void>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "topic") [] topic)
     )
     (call %init_peer_id% ("getDataSrv" "value") [] value)
    )
    (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
   )
   (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
  )
  (xor
   (seq
    (seq
     (call -relay- ("op" "string_to_b58") [topic] k)
     (call -relay- ("kad" "neighborhood") [k [] []] nodes)
    )
    (fold nodes n
     (par
      (xor
       (seq
        (seq
         (call n ("peer" "timestamp_sec") [] t)
         (call n ("aqua-dht" "register_key") [topic t false 0])
        )
        (call n ("aqua-dht" "put_value") [topic value t relay_id service_id 0])
       )
       (null)
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `
      )
      .configHandler((h) => {
        h.on("getDataSrv", "-relay-", () => {
          return peer.connectionInfo.connectedRelay;
        });
        h.on("getDataSrv", "topic", () => {
          return topic;
        });
        h.on("getDataSrv", "value", () => {
          return value;
        });
        h.on("getDataSrv", "relay_id", () => {
          return relay_id === null ? [] : [relay_id];
        });
        h.on("getDataSrv", "service_id", () => {
          return service_id === null ? [] : [service_id];
        });
        h.onEvent("callbackSrv", "response", (args) => {});

        h.onEvent("errorHandlingSrv", "error", (args) => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject("Request timed out for initTopicAndSubscribe");
      });
    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }
    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return Promise.race([promise, Promise.resolve()]);
}
