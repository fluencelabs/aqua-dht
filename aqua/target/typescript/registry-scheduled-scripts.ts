/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.9-release-please-1c9388a-1275-1
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export const replicate_3600_script = `
                    (seq
                     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                     (xor
                      (xor
                       (seq
                        (seq
                         (call -relay- ("peer" "timestamp_sec") [] t)
                         (call -relay- ("registry" "evict_stale") [t] res)
                        )
                        (par
                         (fold res.$.results r-0
                          (par
                           (seq
                            (seq
                             (call -relay- ("op" "string_to_b58") [r-0.$.key.id] k)
                             (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                            )
                            (par
                             (fold nodes n-0
                              (par
                               (new $records_weights
                                (xor
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (call n-0 ("peer" "timestamp_sec") [] tt)
                                      (call n-0 ("trust-graph" "get_weight") [r-0.$.key.owner_peer_id tt] key_weight)
                                     )
                                     (call n-0 ("registry" "republish_key") [r-0.$.key key_weight tt])
                                    )
                                    (fold r-0.$.records record-0
                                     (seq
                                      (call n-0 ("trust-graph" "get_weight") [record-0.$.metadata.issued_by tt] $records_weights)
                                      (next record-0)
                                     )
                                    )
                                   )
                                   (canon n-0 $records_weights  #records_weights_canon)
                                  )
                                  (call n-0 ("registry" "republish_records") [r-0.$.records #records_weights_canon tt])
                                 )
                                 (fail %last_error%)
                                )
                               )
                               (next n-0)
                              )
                              (never)
                             )
                             (null)
                            )
                           )
                           (next r-0)
                          )
                          (never)
                         )
                         (null)
                        )
                       )
                       (fail %last_error%)
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                     )
                    )
    `
 

export function replicate_3600(
    config?: {ttl?: number}
): Promise<void>;

export function replicate_3600(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<void>;

export function replicate_3600(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "replicate_3600",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        replicate_3600_script
    )
}

export const clearExpired_86400_script = `
                    (seq
                     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                     (xor
                      (xor
                       (seq
                        (call -relay- ("peer" "timestamp_sec") [] t)
                        (call -relay- ("registry" "clear_expired") [t])
                       )
                       (fail %last_error%)
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                     )
                    )
    `
 

export function clearExpired_86400(
    config?: {ttl?: number}
): Promise<void>;

export function clearExpired_86400(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<void>;

export function clearExpired_86400(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "clearExpired_86400",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        clearExpired_86400_script
    )
}

export const renew_43200_script = `
                    (seq
                     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                     (xor
                      (xor
                       (seq
                        (seq
                         (call -relay- ("peer" "timestamp_sec") [] t)
                         (call -relay- ("registry" "get_stale_local_records") [t] res)
                        )
                        (par
                         (fold res.$.result r-0
                          (par
                           (seq
                            (seq
                             (seq
                              (new $signature
                               (seq
                                (xor
                                 (mismatch r-0.$.metadata.peer_id %init_peer_id%
                                  (xor
                                   (seq
                                    (call r-0.$.metadata.peer_id ("registry" "get_record_bytes") [r-0.$.metadata t] bytes)
                                    (call r-0.$.metadata.peer_id ("sig" "sign") [bytes] $signature)
                                   )
                                   (fail %last_error%)
                                  )
                                 )
                                 (xor
                                  (seq
                                   (call -relay- ("registry" "get_record_bytes") [r-0.$.metadata t] bytess)
                                   (xor
                                    (call %init_peer_id% ("sig" "sign") [bytess] $signature)
                                    (fail %last_error%)
                                   )
                                  )
                                  (fail %last_error%)
                                 )
                                )
                                (new $signature_test
                                 (seq
                                  (seq
                                   (seq
                                    (call -relay- ("math" "add") [0 1] signature_incr)
                                    (fold $signature signature_fold_var
                                     (seq
                                      (seq
                                       (ap signature_fold_var $signature_test)
                                       (canon -relay- $signature_test  #signature_iter_canon)
                                      )
                                      (xor
                                       (match #signature_iter_canon.length signature_incr
                                        (null)
                                       )
                                       (next signature_fold_var)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon -relay- $signature_test  #signature_result_canon)
                                  )
                                  (ap #signature_result_canon signature_gate)
                                 )
                                )
                               )
                              )
                              (call -relay- ("peer" "timestamp_sec") [] t-0)
                             )
                             (call -relay- ("trust-graph" "get_weight") [r-0.$.metadata.issued_by t-0] weight)
                            )
                            (call -relay- ("registry" "put_record") [r-0.$.metadata t signature_gate.$.[0].signature.[0] weight t-0] result)
                           )
                           (next r-0)
                          )
                          (never)
                         )
                         (null)
                        )
                       )
                       (fail %last_error%)
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                     )
                    )
    `
 

export function renew_43200(
    config?: {ttl?: number}
): Promise<void>;

export function renew_43200(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<void>;

export function renew_43200(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "renew_43200",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        renew_43200_script
    )
}

/* eslint-enable */