/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.9-release-please-1c9388a-1275-1
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export const getRecordMetadata_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "key_id") [] key_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "value") [] value)
                          )
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                       )
                       (call %init_peer_id% ("getDataSrv" "solution") [] solution)
                      )
                      (xor
                       (new $error
                        (new $result
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("peer" "timestamp_sec") [] t)
                                (call %init_peer_id% ("registry" "get_record_metadata_bytes") [key_id %init_peer_id% t value peer_id relay_id service_id solution] bytes)
                               )
                               (xor
                                (call %init_peer_id% ("sig" "sign") [bytes] sig_result)
                                (fail %last_error%)
                               )
                              )
                              (xor
                               (match sig_result.$.success true
                                (call %init_peer_id% ("registry" "create_record_metadata") [key_id %init_peer_id% t value peer_id relay_id service_id solution sig_result.$.signature.[0]] $result)
                               )
                               (ap sig_result.$.error.[0] $error)
                              )
                             )
                             (canon %init_peer_id% $result  #-result-fix-0)
                            )
                            (ap #-result-fix-0 -result-flat-0)
                           )
                           (canon %init_peer_id% $error  #-error-fix-1)
                          )
                          (ap #-error-fix-1 -error-flat-1)
                         )
                        )
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [-result-flat-0 -error-flat-1])
                    )
    `
 
export type GetRecordMetadataResult = [{ issued_by: string; issuer_signature: number[]; key_id: string; peer_id: string; relay_id: string[]; service_id: string[]; solution: number[]; timestamp_issued: number; value: string; } | null, string | null]
export function getRecordMetadata(
    key_id: string,
    value: string,
    peer_id: string,
    relay_id: string[],
    service_id: string[],
    solution: number[],
    config?: {ttl?: number}
): Promise<GetRecordMetadataResult>;

export function getRecordMetadata(
    peer: IFluenceClient$$,
    key_id: string,
    value: string,
    peer_id: string,
    relay_id: string[],
    service_id: string[],
    solution: number[],
    config?: {ttl?: number}
): Promise<GetRecordMetadataResult>;

export function getRecordMetadata(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getRecordMetadata",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "value" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay_id" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "service_id" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "solution" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "struct",
                        "name" : "RecordMetadata",
                        "fields" : {
                            "relay_id" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "issued_by" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "peer_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "timestamp_issued" : {
                                "tag" : "scalar",
                                "name" : "u64"
                            },
                            "service_id" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "value" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "key_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "solution" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u8"
                                }
                            },
                            "issuer_signature" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u8"
                                }
                            }
                        }
                    }
                },
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getRecordMetadata_script
    )
}

export const putRecord_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "metadata") [] metadata)
                        )
                        (call %init_peer_id% ("getDataSrv" "timestamp_created") [] timestamp_created)
                       )
                       (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                      )
                      (xor
                       (seq
                        (seq
                         (call %init_peer_id% ("peer" "timestamp_sec") [] t)
                         (call %init_peer_id% ("trust-graph" "get_weight") [metadata.$.issued_by t] weight)
                        )
                        (call %init_peer_id% ("registry" "put_record") [metadata timestamp_created signature weight t] result)
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [result])
                    )
    `
export type PutRecordArgMetadata = { issued_by: string; issuer_signature: number[]; key_id: string; peer_id: string; relay_id: string[]; service_id: string[]; solution: number[]; timestamp_issued: number; value: string; } 
export type PutRecordResult = { error: string; success: boolean; }
export function putRecord(
    metadata: PutRecordArgMetadata,
    timestamp_created: number,
    signature: number[],
    config?: {ttl?: number}
): Promise<PutRecordResult>;

export function putRecord(
    peer: IFluenceClient$$,
    metadata: PutRecordArgMetadata,
    timestamp_created: number,
    signature: number[],
    config?: {ttl?: number}
): Promise<PutRecordResult>;

export function putRecord(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "putRecord",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "metadata" : {
                    "tag" : "struct",
                    "name" : "RecordMetadata",
                    "fields" : {
                        "relay_id" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "issued_by" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "timestamp_issued" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        },
                        "service_id" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "key_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "solution" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        },
                        "issuer_signature" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        }
                    }
                },
                "timestamp_created" : {
                    "tag" : "scalar",
                    "name" : "u64"
                },
                "signature" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "RegistryResult",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        putRecord_script
    )
}

export const getKeySignature_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "label") [] label)
                       )
                       (call %init_peer_id% ("getDataSrv" "timestamp_created") [] timestamp_created)
                      )
                      (xor
                       (seq
                        (call %init_peer_id% ("registry" "get_key_bytes") [label [] timestamp_created [] ""] bytes)
                        (xor
                         (call %init_peer_id% ("sig" "sign") [bytes] result)
                         (fail %last_error%)
                        )
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [result])
                    )
    `
 
export type GetKeySignatureResult = { error: string | null; signature: number[] | null; success: boolean; }
export function getKeySignature(
    label: string,
    timestamp_created: number,
    config?: {ttl?: number}
): Promise<GetKeySignatureResult>;

export function getKeySignature(
    peer: IFluenceClient$$,
    label: string,
    timestamp_created: number,
    config?: {ttl?: number}
): Promise<GetKeySignatureResult>;

export function getKeySignature(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getKeySignature",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "label" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "timestamp_created" : {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "SignResult",
                    "fields" : {
                        "error" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "signature" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u8"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getKeySignature_script
    )
}

export const getTombstoneSignature_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "key_id") [] key_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "timestamp_issued") [] timestamp_issued)
                       )
                       (call %init_peer_id% ("getDataSrv" "solution") [] solution)
                      )
                      (xor
                       (seq
                        (call %init_peer_id% ("registry" "get_tombstone_bytes") [key_id %init_peer_id% peer_id timestamp_issued solution] bytes)
                        (xor
                         (call %init_peer_id% ("sig" "sign") [bytes] result)
                         (fail %last_error%)
                        )
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [result])
                    )
    `
 
export type GetTombstoneSignatureResult = { error: string | null; signature: number[] | null; success: boolean; }
export function getTombstoneSignature(
    key_id: string,
    peer_id: string,
    timestamp_issued: number,
    solution: number[],
    config?: {ttl?: number}
): Promise<GetTombstoneSignatureResult>;

export function getTombstoneSignature(
    peer: IFluenceClient$$,
    key_id: string,
    peer_id: string,
    timestamp_issued: number,
    solution: number[],
    config?: {ttl?: number}
): Promise<GetTombstoneSignatureResult>;

export function getTombstoneSignature(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getTombstoneSignature",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "timestamp_issued" : {
                    "tag" : "scalar",
                    "name" : "u64"
                },
                "solution" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "SignResult",
                    "fields" : {
                        "error" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "signature" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u8"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getTombstoneSignature_script
    )
}

export const registerKey_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "label") [] label)
                        )
                        (call %init_peer_id% ("getDataSrv" "timestamp_created") [] timestamp_created)
                       )
                       (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                      )
                      (xor
                       (seq
                        (seq
                         (call %init_peer_id% ("peer" "timestamp_sec") [] t)
                         (call %init_peer_id% ("trust-graph" "get_weight") [%init_peer_id% t] weight)
                        )
                        (call %init_peer_id% ("registry" "register_key") [label [] timestamp_created [] "" signature weight t] result)
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [result])
                    )
    `
 
export type RegisterKeyResult = { error: string; key_id: string; success: boolean; }
export function registerKey(
    label: string,
    timestamp_created: number,
    signature: number[],
    config?: {ttl?: number}
): Promise<RegisterKeyResult>;

export function registerKey(
    peer: IFluenceClient$$,
    label: string,
    timestamp_created: number,
    signature: number[],
    config?: {ttl?: number}
): Promise<RegisterKeyResult>;

export function registerKey(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "registerKey",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "label" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "timestamp_created" : {
                    "tag" : "scalar",
                    "name" : "u64"
                },
                "signature" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "RegisterKeyResult",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "key_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        registerKey_script
    )
}

export const getRecordSignature_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "metadata") [] metadata)
                       )
                       (call %init_peer_id% ("getDataSrv" "timestamp_created") [] timestamp_created)
                      )
                      (xor
                       (new $signature
                        (seq
                         (xor
                          (mismatch metadata.$.peer_id %init_peer_id%
                           (xor
                            (seq
                             (seq
                              (seq
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                               (call metadata.$.peer_id ("registry" "get_record_bytes") [metadata timestamp_created] bytes)
                              )
                              (call metadata.$.peer_id ("sig" "sign") [bytes] $signature)
                             )
                             (new $-ephemeral-stream-
                              (new #-ephemeral-canon-
                               (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                              )
                             )
                            )
                            (seq
                             (seq
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (fail %last_error%)
                            )
                           )
                          )
                          (xor
                           (seq
                            (call -relay- ("registry" "get_record_bytes") [metadata timestamp_created] bytess)
                            (xor
                             (call %init_peer_id% ("sig" "sign") [bytess] $signature)
                             (fail %last_error%)
                            )
                           )
                           (fail %last_error%)
                          )
                         )
                         (new $signature_test
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("math" "add") [0 1] signature_incr)
                             (fold $signature signature_fold_var
                              (seq
                               (seq
                                (ap signature_fold_var $signature_test)
                                (canon %init_peer_id% $signature_test  #signature_iter_canon)
                               )
                               (xor
                                (match #signature_iter_canon.length signature_incr
                                 (null)
                                )
                                (next signature_fold_var)
                               )
                              )
                              (never)
                             )
                            )
                            (canon %init_peer_id% $signature_test  #signature_result_canon)
                           )
                           (ap #signature_result_canon signature_gate)
                          )
                         )
                        )
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [signature_gate.$.[0]])
                    )
    `
export type GetRecordSignatureArgMetadata = { issued_by: string; issuer_signature: number[]; key_id: string; peer_id: string; relay_id: string[]; service_id: string[]; solution: number[]; timestamp_issued: number; value: string; } 
export type GetRecordSignatureResult = { error: string | null; signature: number[] | null; success: boolean; }
export function getRecordSignature(
    metadata: GetRecordSignatureArgMetadata,
    timestamp_created: number,
    config?: {ttl?: number}
): Promise<GetRecordSignatureResult>;

export function getRecordSignature(
    peer: IFluenceClient$$,
    metadata: GetRecordSignatureArgMetadata,
    timestamp_created: number,
    config?: {ttl?: number}
): Promise<GetRecordSignatureResult>;

export function getRecordSignature(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getRecordSignature",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "metadata" : {
                    "tag" : "struct",
                    "name" : "RecordMetadata",
                    "fields" : {
                        "relay_id" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "issued_by" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "timestamp_issued" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        },
                        "service_id" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "key_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "solution" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        },
                        "issuer_signature" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        }
                    }
                },
                "timestamp_created" : {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "SignResult",
                    "fields" : {
                        "error" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "signature" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u8"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getRecordSignature_script
    )
}

export const getKeyMetadata_script = `
                    (seq
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "key_id") [] key_id)
                      )
                      (xor
                       (call %init_peer_id% ("registry" "get_key_metadata") [key_id] result)
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [result])
                    )
    `
 
export type GetKeyMetadataResult = { error: string; key: { challenge: number[]; challenge_type: string; id: string; label: string; owner_peer_id: string; signature: number[]; timestamp_created: number; }; success: boolean; }
export function getKeyMetadata(
    key_id: string,
    config?: {ttl?: number}
): Promise<GetKeyMetadataResult>;

export function getKeyMetadata(
    peer: IFluenceClient$$,
    key_id: string,
    config?: {ttl?: number}
): Promise<GetKeyMetadataResult>;

export function getKeyMetadata(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getKeyMetadata",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "GetKeyMetadataResult",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "key" : {
                            "tag" : "struct",
                            "name" : "Key",
                            "fields" : {
                                "challenge" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "u8"
                                    }
                                },
                                "label" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "signature" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "u8"
                                    }
                                },
                                "id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "owner_peer_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "challenge_type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "timestamp_created" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getKeyMetadata_script
    )
}

export const addTombstone_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "key_id") [] key_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "timestamp_issued") [] timestamp_issued)
                        )
                        (call %init_peer_id% ("getDataSrv" "solution") [] solution)
                       )
                       (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                      )
                      (xor
                       (seq
                        (call %init_peer_id% ("peer" "timestamp_sec") [] t)
                        (call %init_peer_id% ("registry" "add_tombstone") [key_id %init_peer_id% peer_id timestamp_issued solution signature t] result)
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [result])
                    )
    `
 
export type AddTombstoneResult = { error: string; success: boolean; }
export function addTombstone(
    key_id: string,
    peer_id: string,
    timestamp_issued: number,
    solution: number[],
    signature: number[],
    config?: {ttl?: number}
): Promise<AddTombstoneResult>;

export function addTombstone(
    peer: IFluenceClient$$,
    key_id: string,
    peer_id: string,
    timestamp_issued: number,
    solution: number[],
    signature: number[],
    config?: {ttl?: number}
): Promise<AddTombstoneResult>;

export function addTombstone(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "addTombstone",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "timestamp_issued" : {
                    "tag" : "scalar",
                    "name" : "u64"
                },
                "solution" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                },
                "signature" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "RegistryResult",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        addTombstone_script
    )
}

export const republishKey_script = `
                    (seq
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "key") [] key)
                      )
                      (xor
                       (seq
                        (seq
                         (call %init_peer_id% ("peer" "timestamp_sec") [] t)
                         (call %init_peer_id% ("trust-graph" "get_weight") [key.$.owner_peer_id t] weight)
                        )
                        (call %init_peer_id% ("registry" "republish_key") [key weight t] result)
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [result])
                    )
    `
export type RepublishKeyArgKey = { challenge: number[]; challenge_type: string; id: string; label: string; owner_peer_id: string; signature: number[]; timestamp_created: number; } 
export type RepublishKeyResult = { error: string; success: boolean; }
export function republishKey(
    key: RepublishKeyArgKey,
    config?: {ttl?: number}
): Promise<RepublishKeyResult>;

export function republishKey(
    peer: IFluenceClient$$,
    key: RepublishKeyArgKey,
    config?: {ttl?: number}
): Promise<RepublishKeyResult>;

export function republishKey(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "republishKey",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "struct",
                    "name" : "Key",
                    "fields" : {
                        "challenge" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        },
                        "label" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "signature" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u8"
                            }
                        },
                        "id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "owner_peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "challenge_type" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "timestamp_created" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "RegistryResult",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        republishKey_script
    )
}

/* eslint-enable */